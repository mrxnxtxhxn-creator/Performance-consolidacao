// server.js - Um servidor simples para a nossa API
const express = require('express');
const cors = require('cors');
const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors()); // Permite que o frontend (em outra porta/domínio) acesse a API
app.use(express.json()); // Permite que o servidor entenda JSON nos corpos das requisições

// --- "Banco de Dados" em Memória ---
// Para um projeto real, substitua isso por um banco de dados como MongoDB, PostgreSQL, etc.
let db = {
  operations: [],
  teamColors: {}
};

// --- Funções Auxiliares de Dados Iniciais ---
const generateInitialData = () => {
    const teams = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];
    const data = [];
    let id = 1;
    const today = new Date().toISOString().slice(0, 10);
    teams.forEach((letter, index) => {
        const teamName = `Dupla ${letter}`;
        const startHour = 13.5 + (index % 4) * 0.25;
        const endHour = 22.5 - (index % 3) * 0.5;
        const packages = 1800 + Math.floor(Math.random() * 600) - (index * 70);
        data.push({
            id: id++, team: teamName,
            startTime: `${today}T${String(Math.floor(startHour)).padStart(2, '0')}:${String((startHour % 1) * 60).padStart(2, '0')}`,
            endTime: `${today}T${String(Math.floor(endHour)).padStart(2, '0')}:${String((endHour % 1) * 60).padStart(2, '0')}`,
            packages: packages
        });
    });
    return data;
};

// Preenche o banco de dados se estiver vazio
if (db.operations.length === 0) {
    db.operations = generateInitialData();
}

// --- Endpoints da API ---

// GET: Obter todos os dados (operações e cores)
app.get('/api/data', (req, res) => {
  console.log('GET /api/data - Enviando dados...');
  res.json(db);
});

// POST: Adicionar uma nova operação
app.post('/api/operations', (req, res) => {
  const newOperation = req.body;
  if (!newOperation || !newOperation.team || !newOperation.startTime || !newOperation.endTime || !newOperation.packages) {
    return res.status(400).json({ message: 'Dados da operação inválidos.' });
  }
  newOperation.id = Date.now(); // Garante um ID único
  db.operations.push(newOperation);
  console.log(`POST /api/operations - Nova operação adicionada para a dupla ${newOperation.team}`);
  res.status(201).json(newOperation);
});

// POST: Salvar todas as operações e cores (substitui os dados atuais)
// Útil para salvar o estado completo, incluindo novas cores
app.post('/api/data', (req, res) => {
    const { operations, teamColors } = req.body;
    if (!operations || !teamColors) {
        return res.status(400).json({ message: 'Dados inválidos.' });
    }
    db.operations = operations;
    db.teamColors = teamColors;
    console.log('POST /api/data - Dados salvos com sucesso.');
    res.status(200).json({ message: 'Dados salvos com sucesso.' });
});


// DELETE: Limpar todos os dados
app.delete('/api/data', (req, res) => {
  db = {
    operations: [],
    teamColors: {}
  };
  console.log('DELETE /api/data - Todos os dados foram limpos.');
  res.status(200).json({ message: 'Todos os dados foram limpos.' });
});


app.listen(PORT, () => {
  console.log(`Servidor a correr na porta ${PORT}`);
});
